#!/bin/zsh

autoload -U colors && colors

source /etc/bash_completion.d/git-prompt

#if [ -d ~/.zsh.d ]; then
#source ~/.zsh.d/zshrc
#source ~/.zsh.d/config_tools
#source ~/.zsh.d/colors
#source ~/.zsh.d/variables

#conf_load_settings ~/.zshcolors
#fi

#export TERM=screen-256color

#source $HOME/config/powerline/powerline/bindings/zsh/powerline.zsh
source ~/.zsh.d/prompt.sh
#function powerline_precmd()
#{
#export PS1="$(~/.zsh.d/powerline-bash.py $? --shel zsh)"
#}
#precmd_functions+=(powerline_precmd)

# Below code is obsolete

function move {
for i in $1*;
do
    name=$(<<<$i md5sum | sed 's/  -//').flv
    echo "$i -> $name"
    sudo mv -i "$i" "themes/$name" 2>/dev/null
done
}

function vdl {
cd videos && wget "$@" && exit
}

function dl {
wget "$@" && exit
}

# OPTIONS
#/u/prof/acu/public/tiger/lib:
setopt sh_word_split # Do not quote expanded vars
setopt transient_rprompt # Delete previous Rprompt when prompting

function precmd {

local TERMWIDTH
(( TERMWIDTH = ${COLUMNS} - 4))


###
# Truncate the path if it's too long.

PR_FILLBAR=""
PR_PWDLEN=""

local promptsize=${#${(%):---(%n@%m:%l)---()--}}
local pwdsize=${#${(%):-%~}}

if [[ "$promptsize + $pwdsize" -gt $TERMWIDTH ]]; then
    ((PR_PWDLEN=$TERMWIDTH - $promptsize))
else
    PR_FILLBAR="\${(l.(($TERMWIDTH - ($promptsize + $pwdsize)))..${PR_HBAR}.)}"
fi
}


setopt extended_glob
preexec () {
    if [[ "$TERM" == "screen" ]]; then
        local CMD=${1[(wr)^(*=*|sudo|-*)]}
        echo -n "\ek$CMD\e\\"
    fi
}


setprompt () {
    ###
    # Need this so the prompt will work.

    setopt prompt_subst


    ###
    # See if we can use colors.

    autoload colors zsh/terminfo
    colors
    for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
        eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
        eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
        (( count = $count + 1 ))
    done
    PR_NO_COLOUR="%{$terminfo[sgr0]%}"

    red="%{[33;01;31m%}"
    green="%{[33;01;32m%}"
    blue="%{[33;01;36m%}"
    yellow="%{[33;01;33m%}"
    purple="%{[33;01;34m%}"

    lred="%{[33;01;31m%}"
    lgreen="%{[33;01;32m%}"
    lblue="%{[33;01;36m%}"
    lyellow="%{[33;01;33m%}"
    lpurple="%{[33;01;34m%}"

    white="%{[0m%}"

    #source ~/.zshcolors

    ###
    # See if we can use extended characters to look nicer.

    typeset -A altchar
    set -A altchar ${(s..)terminfo[acsc]}

    # french charset
    export LESSCHARSET="latin1"

    # customize time builtin

    TIMEFMT="time: %*E real  %*U user  %*S system (%P)"

    # bindings

    bindkey '[H' beginning-of-line
    bindkey '[F' end-of-line
    bindkey '[3~' delete-char             # Del
    bindkey '[2~' overwrite-mode          # Insert
    bindkey '[5~' history-search-backward # PgUp
    bindkey '[6~' history-search-forward  # PgDn

    # ALIASES

    LSOPTS="--tabsize=0 --literal --color --show-control-chars --human-readable"


    PR_SET_CHARSET="%{$terminfo[enacs]%}"
    PR_SHIFT_IN="%{$terminfo[smacs]%}"
    PR_SHIFT_OUT="%{$terminfo[rmacs]%}"
    PR_HBAR=${altchar[q]:--}
    PR_ULCORNER=${altchar[l]:--}
    PR_LLCORNER=${altchar[m]:--}
    PR_LRCORNER=${altchar[j]:--}
    PR_URCORNER=${altchar[k]:--}


    ###
    # Decide if we need to set titlebar text.

    case $TERM in
        xterm*)
            PR_TITLEBAR=$'%{\e]0;%(!.-=*[ROOT]*=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\a%}'
            ;;
        screen)
            PR_TITLEBAR=$'%{\e_screen \005 (\005t) | %(!.-=[ROOT]=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\e\\%}'
            ;;
        *)
            PR_TITLEBAR=''
            ;;
    esac


    ###
    # Decide whether to set a screen title
    if [[ "$TERM" == "screen" ]]; then
        PR_STITLE=$'%{\ekzsh\e\\%}'
    else
        PR_STITLE=''
    fi


    ###
    # Finally, the prompt.

    PROMPT='$PR_SET_CHARSET$PR_STITLE${(e)PR_TITLEBAR}\
        $PROMPT_NICK_COLOR%(!.%SROOT%s.$USER)$blue@$PROMPT_HOST_COLOR%m$blue$ $PR_NO_COLOUR'

    RPROMPT='$lblue($red%?$lblue)$lblue(\
        $lpurple%$PR_PWDLEN<...<%~%<<\
        $lblue)$white'

    PS2='$lpurple$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
        $lblue$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT(\
        $lgreen%_$lblue)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
        $lpurple$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$lblue '
}

# PATH

export GOPATH=/var/go
export PATH="$HOME/.local/bin:$HOME/usr/sbin:$HOME/usr/bin:/ng/sdk/tools/devenv/bin:$PATH:/ng/bin"
export LD_LIBRARY_PATH="$HOME/usr/lib;$HOME/usr/lib/x86_64-linux-gnu;$LD_LIBRARY_PATH"
export PKG_CONFIG_PATH="$HOME/usr/lib/pkgconfig"
export PYTHONPATH="$PYTHONPATH:$HOME/config/local/python2.7/site-packages/powerline:$HOME/usr/lib/python2.7/site-packages:$HOME/config/python"

# HISTORY

HISTSIZE=5000
HISTFILE=~/.zsh_history
SAVEHIST=5000

# CUSTOM WIDGETS

show-man ()
{
    man ${BUFFER%% *} 2> /dev/null;
}

my-accept-line ()
{

    targets="eclipse emacs evince firefox xpdf thunderbird konqueror k gwenview koshell inkscape amule"
    # FIXME: Do not disown in text mode!
    if ! (echo "$BUFFER" | grep -q '&!$'); then
        for p in $targets; do
            if echo "$BUFFER" | grep -q "^$p\b"; then
                BUFFER="$BUFFER&!"
                break
            fi
        done
    fi
    zle accept-line
}

zle -N my-accept-line
zle -N show-man # opens the man of the current command

bindkey "" my-accept-line

# COMPLETION

autoload -U compinit
compinit

# FUNCTIONS

error ()
{
    echo $* 1>&2
}

check_args ()
{
    [ $2 -eq $3 ] || (error "$1 requires $3 arguments"; return 1)
}

testing ()
{
    check_args "$0" "$#" 1 || return 1
    if ! [ -e /usr/portage/$1 ]; then
        error "Package $1 does not exist"
        return 1
    fi
    if grep "^$1$" /etc/portage/package.keywords > /dev/null 2> /dev/null; then
        error "Package $1 already in testing mode"
        return 1
    fi
    echo "$1" >> /etc/portage/package.keywords
}

match ()
{
    echo "$2" | grep "$1" > /dev/null 2> /dev/null
    return $?
}

tunnel ()
{
    case $# in
        2)
            ssh "$2" -L "${1}:localhost:${1}"
            ;;
        3)
            ssh "$2" -L "${1}:localhost:${1}" "$3"
            ;;
        *)
            return 1
            ;;
    esac
}

#sudo ()
#{
#    su -c "$*"
#}

mkcd ()
{
    [ $# -eq 1 ] || return 1
    mkdir -m 700 -p "$1"
    cd "$1"
}

# ENVIRONMENT

export EPITA=1
export EDITOR=vim # Or anything else
export FULLNAME="RÃ©mi Labeyrie"
export NAME=rlabeyrie
export EMAIL="RÃ©mi Labeyrie <remi.labeyrie@3ds.com>"
export NGLICENSE=/ng/src/$USER/license.txt
export CVLICENSE=/ng/src/$USER/cvlicense.dat
export PREFIX=~/usr
export GTK3_RC_FILES=/usr/share/themes/Default/gtk-3.0/gtkrc

# XSET

if [ -z $SSH_TTY ]; then
    xset -b
    xset b off # Better without beep
    xset r rate 300 100 # Shell cursor speed
fi

# LOCALS

local=~/".zshrc.local"
[ -r "$local" ] && source "$local"
true

#setprompt

# EXPORT

export CLICOLOR=xterm-color

export LS_COLORS='di=1;34:ln=4;34:ex=91:*=36:*.txt=33:*README=1;33:*README.txt=1;33:*TODO=33:*ChangeLog=33:*AUTHORS=33:*CONTRIBUTORS=33:*LICENSE=33:*PKG-INFO=33:*NEWS=33:*COPYING=33:*COPYRIGHT=33:*Makefile=95:*.o=36:*.h=33:*.hpp=33:*.c=93:*.\
    hh=33:*.cc=93:*.cpp=93:*.hxx=93:*.tar=96:*.gz=96:*.bz2=96:*.tbz=96:*.tgz=96:*.7z=96'

alias make='make -j5'

# ALIAS LS

alias mv='mv -i'
alias ls='ls --color'
alias ll='ls -lh'
alias l='ls'
alias la='ls -a'
alias rm='rm -i'
alias rmf='rm -rf'
alias e='emacs -nw'

# SVN ALIAS

alias sco='~/script/svnco.sh'
alias sci='svn ci -m'
alias sst='svn st'
alias sup='svn up'
alias sad='svn add'
alias sde='svn delete --force'

# SCRIPTS
alias moul='~/miniprojing1/scripts/moulinette/moulcpp.rb'
alias fr='~/script/PIEPack/friends.sh'
alias z='~/scripts/lock.sh'
alias sout='~/script/PIEPack/soutenance.sh'
alias sm='~/script/PIEPack/places.sh'
alias clean='find . -name "*~" -exec rm -v {} \;'
alias awesome='cp ~/.xinitrc.awesome ~/.xinitrc && startx'
alias fluxbox='cp ~/.xinitrc.fluxbox ~/.xinitrc && startx'
alias rsdl='wget --no-check-certificate --header="Cookie: enc=`cat ~/.rapidshare.cookies`"'
alias tmux='tmux -u2'

# BSD survival kit

which gls >& /dev/null && alias ls="gls $LSOPTS"
which gsed >& /dev/null && alias sed=gsed


# BYE

alias bye="kill -9 -1"

# untar any tarball

function detar()
{
    tar xvf $1
}

# Make a bz2 archive

function mktar()
{
    tar cvjf $1.tar.bz2 $1
}

# Source the conf file

alias reload="source ~/.zshrc"
NNTPSERVER='news.epita.fr' && export NNTPSERVER
alias list='~/api'
export PAGER=vimpager
alias checkout='~/scripts/checkout.sh'
clone (){
    echo $3
    #echo "hg clone https://login_l@forge.acu.epita.fr/projects/$1"
    hg clone https://login_l@forge.acu.epita.fr/projects/$2
}

export PERL_LOCAL_LIB_ROOT="/data/homes/rlabeyri/perl5";
export PERL_MB_OPT="--install_base /data/homes/rlabeyri/perl5";
export PERL_MM_OPT="INSTALL_BASE=/data/homes/rlabeyri/perl5";
export PERL5LIB="/data/homes/rlabeyri/perl5/lib/perl5/x86_64-linux-gnu-thread-multi:/data/homes/rlabeyri/perl5/lib/perl5";
export PATH="/data/homes/rlabeyri/perl5/bin:$PATH";

source ~/.zsh.d/lmake.sh
